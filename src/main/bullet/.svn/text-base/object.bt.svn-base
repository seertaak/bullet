// how do we do Java class extension and implementation?

import javax.swing.JFrame
import javax.swing.JPanel
import java.awt.Color
import java.awt.Graphics
import java.awt.Graphics2D

set frame: new JFrame "Bullet Fractal Tree"
// set panel!

set panel: new: class FooClass
  xtnd JPanel
  impl List

  set builder :new FooClassBuilder

  set x 1.0
  set y 1.0

  func init (x y)
    super x y
  func paintComponent (g)
    render (g getWidth super.getHeight)

set panel.newVar 90
set panel."newVar" 100 // same as above!

panel xtnd Integer //! can dynamically extend a class if super is Object.
  // optional
  func toString ()
    "MySuperInteger[" concat super.toString . concat "]"

panel impl Runnable // can dynamically implemement an interface (and define)
  func run ()
    print "I'm running!"


this is a MACRO (a macro method??) translates to

set panel: panel dynimpl Runnable 
set panel: panel dynxtnd Integer

func panel.run ()
  print "I'm running!"
  

panel xtnd Integer: _ ->
  

panel.run

with frame
  add panel // at this point the panel gets deref'd to the proxy.
  setSize 640 400
  setVisible true


if (obj isa Integer) /// really nice notation!
  
object
  var x
  var y
  func init (x)
    set x 0

  macro xtnd (klass :rest defns)
    qquote
      var uniq.cl ,klass
      var uniq.r: this dynxtnd uniq.cl
      with uniq.r
        foreach defn ,defns
          ,defn
          
        
    
// patterns

match point3d
  [x y]  : print "2D Vector"
  [x y z]: print "3D vector"
  

// type system

Use same inheritance/implementation structure as Java -- transparent!
BUT
  - Default is public;
  - Default is virtual and instance-based (i.e. non-static);
  - Methods are standard methods if they don't contain free variables, otherwise they are essentially
    inner/anonymous classes called from stub methods (i.e. closures);
  - Another superclass can be extended dynamically. As this introduces new state and code, we need 
    to generate a new version of this class, and stuff the data into it.
  - there are object macros, which are basically just ordinary macros called after
    the obj! -- i.e. obj <mmacro> args ==> <macro> obj args, and the macro substitution 
