import org.bullet.LineProcessor
import org.bullet.Interpreter
import org.bullet.Reader
import org.bullet.BulletException
import org.bullet.lexer.Lexer
import org.bullet.lexer.Lexeme
import org.bullet.lexer.Token
import org.bullet.value.Environment
import org.bullet.value.Lambda
import org.bullet.value.Macro
import org.bullet.value.BExpr
import org.bullet.value.Primitive
import org.bullet.value.Symbol

import java.lang.Object
import java.lang.String
import java.lang.Double
import java.lang.Float
import java.lang.Character
import java.lang.Byte
import java.lang.Integer
import java.lang.Long
import java.lang.Short
import java.lang.Math
import java.lang.System

import java.lang.StringBuilder

import java.io.File
import java.io.FileReader
import java.io.FileWriter
import java.io.BufferedReader
import java.io.StringReader

import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import java.util.TreeSet
import java.util.LinkedList
import java.util.List
import java.util.TreeMap
import java.util.Arrays

var macro 
  tfm (name args :rest body)
    qquote: set ,name: tfm ,args ,@body

macro if (condition trueExpr falseExpr)
  qquote
    cond
      ,condition ; ,trueExpr
      true         ,falseExpr

macro when (condition :rest exprs)
  qquote
    cond
      ,condition ; begin
        ,@exprs
        null
      true         null

macro inc (variable): 
  qquote: set ,variable: + 1 ,variable

macro dec (variable): 
  qquote: set ,variable: - ,variable 1 

macro foreach (varname collection :rest body)
  qquote: begin 
    var uniq.i: ,collection iterator
    while uniq.i.hasNext
      var ,varname uniq.i.next
      begin ,@body

macro func (name args :rest exprs)
  qquote
    set ,name
      fn ,args ,@exprs

func is-a (clazz obj)
  clazz isAssignableFrom obj.getClass

func desugar (strOrFile)
  var code strOrFile
  var rdr
    if (is-a File code)
      new FileReader code
      new StringReader code
  var pre: new LineProcessor rdr
  "(begin " . concat (pre process) . concat ")"

//func read* (str)
  //interpreter read str

//func read (str)
  //interpreter read: desugar str

func eval (form)
  //print "Eval: called with: " str ":" str.getClass
  var result: interpreter eval form
  //print "Eval: result: " result
  result

func load (str): eval* str

macro case (cmpValue :rest exprs)
  var beg
    cond 
      is-a Symbol cmpValue ; cmpValue.getLoc
      is-a BExpr  cmpValue ; cmpValue.getBegin
      true                   null
  var output: new BExpr beg
  output add: 'cond
  foreach vclause exprs
    var condition: vclause get 0
    var tfmCond
      qquote: ,cmpValue equals ,condition
    vclause set 0 tfmCond
    output add vclause
    output setEnd vclause.getEnd
  val output

macro >= (left right)
  qquote: or
    >  ,left ,right
    == ,left ,right

macro <= (left right)
  qquote: or
    <  ,left ,right
    == ,left ,right

macro != (left right)
  qquote: not: == ,left ,right
      
func alist (:rest datums)
  var result: new ArrayList
  foreach datum datums
    result add datum
  result

macro hmap (:rest bindings)
  var uniq.rv: new HashMap
  foreach binding bindings
    var first:  binding get 0 | eval
    var second: binding get 1 | eval
    uniq.rv put first second
  val uniq.rv

func vec (:rest args)
  args

func cons (x xs)
  set r: vec
  r add x
  r addAll xs
  r

func head (vec)
  vec get 0

func second (vec)
  vec get 1

func last (vec)
  vec get: dec vec.size

func tail (vs)
  if (== 1 vs.size)
    vec
    if (is-a BExpr vs)
      vs subVec 1
      vs subList 1: dec vs.size

func map (mapFn xs)
  var result: vec
  foreach x xs
    result add: mapFn x
  result

func filter (predFn xs)
  var result: vec
  foreach x xs
    when (predFn x)
      result add x
  result

func foldl (f z xs)
  if xs.isEmpty
    z
    foldl f 
      f z (head xs) 
      tail xs

func foldr (foldFn z xs)
  if xs.isEmpty
    z
    foldFn
      head xs 
      foldr foldFn z (tail xs)

macro let (bnds :rest body)
  set sts: vec 'begin
  foreach bnd bnds
    sts add: vec 'set (head bnd) (second bnd)
  qquote
    begin ,@sts ,@body

func vec?        (v): is-a BExpr v
func alist?      (v): is-a ArrayList v
func char?       (v): is-a Character v
func string?     (v): is-a String v
func map?        (v): is-a Map v
func list?       (v): is-a List v
func double?     (v): is-a Double v
func float?      (v): is-a Float v
func long?       (v): is-a Long v
func byte?       (v): is-a Byte v
func short?      (v): is-a Short v

macro env (:rest body)
  qquote
    begin ,@body interpreter.env
 
macro module (modName :rest modBody)
  qquote
    var ,modName: env ,@modBody

module str
  func join (:rest strs)
    set rv: new StringBuilder
    foreach str strs
      rv append str
    rv.toString

  func joinOn (delim strs)
    set rv: new StringBuilder
    set first true
    foreach str strs
      if first
        set first false
        rv append delim
      rv append str
    rv.toString

func cast (klass obj)
  if (is-a klass obj)
    obj
    throw: new BulletException 
      str.join "Expected a "     klass.getSimpleName 
               ", but found a: " obj.getClass.getSimpleName

module debug
  macro dbg (x)
    qquote
      begin
        var uniq.z ,x
        print ',x " = " uniq.z
        uniq.z
      
func hset (:rest args)
  set r: new HashSet
  foreach arg args: r add arg
  r

func tset (:rest args)
  set r: new TreeSet
  foreach arg args: r add arg.toString
  r

macro tmap (:rest bindings)
  var uniq.rv: new TreeMap
  foreach binding bindings
    set first:  binding get 0 | eval
    set second: binding get 1 | eval
    uniq.rv put first second
  uniq.rv

macro when-not (test :rest body)
  qquote
    if ,test 
      null
      begin ,@body null

func flatten (cc)
  if (is-a BExpr cc)
    if (!= cc.size 2)
      null
      begin
        var first: cc get 0
        var result: vec
        result addAll: flatten first
        result add: cc get 1
        result
    vec cc // return the symbol

func chain (elts)
  if (== 1 elts.size)
    elts get 0
    begin
      set r: head elts
      foreach elt (elts subVec 2)
        set r: vec r elt
      r

macro with (obj :rest methCalls)
  var uniq.eobj obj
  var uniq.res: vec 'include
  foreach mc methCalls
    set xs: vec uniq.eobj
    xs addAll mc
    uniq.res add xs
  uniq.res add uniq.eobj  // returns itself
  uniq.res


//macro with (obj :rest bindings)
//  var uniq.eobj obj
//  var uniq.res: vec 'begin
//
//  foreach binding bindings
//    set first: binding get 0
//    set second: binding get 1
//    set xs: vec 'set 
//
//    set tmp: vec
//    tmp add uniq.eobj
//    tmp addAll: first | flatten
//
//    xs add: tmp | chain
//    xs add: second
//
//    uniq.res add xs
//
//  uniq.res add uniq.eobj  // returns itself
//  uniq.res
//
