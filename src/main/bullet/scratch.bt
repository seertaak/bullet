var x 10
var y 40

print
  "(". concat x.toString . concat ", " . concat y.toString 
       . concat ")"

print "ZERO: " 0L.getClass
print "\nCHAR"
print '\n' 'c'
print "CHAR"
print (10 getClass)
print (10.0d getClass)

print "Testing scoping"
var zz "ZZ Top"
begin
  begin
    set zz 10
    print zz
print zz

var ls (alist 0 1 2 3 4
              5 6 7 8 9)

for (var i 0; < i ls.size; inc i)
  print: ls get i

var name "Martin"
print "Testing case:"
print: case name 
  "Martin" "You are great."
  "Jojo"   "You are sexy."
  //"Frodo"  : print "You not."
  //"Alex"   : print "You rock.")

print "Testing cond:"
cond
  name equals "Martin" ; print "You are great."
  name equals "Jojo"   ; print "You are sexy."
  name equals "Frodo"  ; print "You not."
  name equals "Alex"   ; print "You rock."


print: cond
  "martin" equals "MARTIN" ; "weird!"
  "martin" equals "martin" ; "good"

print: "martin".toUpperCase. substring 0 2

//eval: read "print 5"
//eval: read: new File "/home/mpercossi/src/bullet/src/main/bullet/foo.bt"

print: is-a Integer 5

print: 5.getClass valueOf "2343"
print: 4.getClass isAssignableFrom 5.getClass

//var x 0

foreach s (Arrays asList 0 1 2 3 4)
  print "--"
  print s 

print: Arrays asList 0 1 2 3 4

print
  "martin".toUpperCase . substring 0 2 . toString
  "martin" toUpperCase . substring 0 2
print "We got here."

var xs: new ArrayList
print xs
for (var i 0; < i 4; inc i)
  xs add: * i 4
for (var i 0; < i 4; inc i)
  xs get i | * 2 | xs set i

foreach s xs: print s
foreach s xs: print s

func factorial (n)
  if (> n 1)
    * n: factorial: dec n
    1

print: factorial 5

alist 0 1 2 3 4 | map (fn (x): + x 2) | print "Testing map: "

print: hmap
  ("Martin" concat "foo") 33
  "Alex": + 33 2
  "JoJo" 29

print: hmap $ "Martin" 33; "Alex" 35; "Jojo" 29

print: alist

print "PI " 3.1415

