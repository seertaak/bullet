// This is an attempt to recreate the core library of Clojure in Bullet.

func vec (:rest args)
  args

func cons (x xs)
  set r: vec
  r add x
  r addAll xs
  r

func first (vec)
  vec get 0

func second (vec)
  vec get 1

func last (vec)
  vec get: dec vec.size

func tail (vec)
  vec subVec 1

macro let (bnds :rest body)
  set sts: vec 'begin
  foreach bnd bnds
    sts add: vec 'set (first bnd) (second bnd)
  qquote
    begin ,@sts ,@body

func vec?        (v): is-a BExpr v
func alist?      (v): is-a ArrayList v
func char?       (v): is-a Character v
func string?     (v): is-a String v
func map?        (v): is-a Map v
func list?       (v): is-a List v
func double?     (v): is-a Double v
func float?      (v): is-a Float v
func long?       (v): is-a Long v
func byte?       (v): is-a Byte v
func short?      (v): is-a Short v

func join (:rest strs)
  set rv: new StringBuilder
  foreach str strs
    rv append str
  rv.toString

func cast (klass obj)
  if (is-a klass obj)
    obj
    throw: new BulletException 
      join "Expected a "     klass.getSimpleName 
           ", but found a: " obj.getClass.getSimpleName

func hset (:rest args)
  set r: new HashSet
  foreach arg args: r add arg
  r

func tset (:rest args)
  set r: new TreeSet
  foreach arg args: r add arg.toString
  r

macro tmap (:rest bindings)
  var uniq.rv: new TreeMap
  foreach binding bindings
    set first:  binding get 0 | eval
    set second: binding get 1 | eval
    uniq.rv put first second
  uniq.rv

macro when-not (test :rest body)
  qquote
    if ,test 
      nil
      begin ,@body 
            null

func str (:rest args)
  set n args.size
  cond
    == n 0 ; ""
    == n 1 ; args get 0 . toString
    true   ; join args

